{"ast":null,"code":"\"use strict\";\n\nconst taskManager = require(\"./managers/tasks\");\nconst patternManager = require(\"./managers/patterns\");\nconst async_1 = require(\"./providers/async\");\nconst stream_1 = require(\"./providers/stream\");\nconst sync_1 = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nconst utils = require(\"./utils\");\nasync function FastGlob(source, options) {\n  assertPatternsInput(source);\n  const works = getWorks(source, async_1.default, options);\n  const result = await Promise.all(works);\n  return utils.array.flatten(result);\n}\n// https://github.com/typescript-eslint/typescript-eslint/issues/60\n// eslint-disable-next-line no-redeclare\n(function (FastGlob) {\n  function sync(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, sync_1.default, options);\n    return utils.array.flatten(works);\n  }\n  FastGlob.sync = sync;\n  function stream(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, stream_1.default, options);\n    /**\r\n     * The stream returned by the provider cannot work with an asynchronous iterator.\r\n     * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\r\n     * This affects performance (+25%). I don't see best solution right now.\r\n     */\n    return utils.stream.merge(works);\n  }\n  FastGlob.stream = stream;\n  function generateTasks(source, options) {\n    assertPatternsInput(source);\n    const patterns = patternManager.transform([].concat(source));\n    const settings = new settings_1.default(options);\n    return taskManager.generate(patterns, settings);\n  }\n  FastGlob.generateTasks = generateTasks;\n  function isDynamicPattern(source, options) {\n    assertPatternsInput(source);\n    const settings = new settings_1.default(options);\n    return utils.pattern.isDynamicPattern(source, settings);\n  }\n  FastGlob.isDynamicPattern = isDynamicPattern;\n  function escapePath(source) {\n    assertPatternsInput(source);\n    return utils.path.escape(source);\n  }\n  FastGlob.escapePath = escapePath;\n})(FastGlob || (FastGlob = {}));\nfunction getWorks(source, _Provider, options) {\n  const patterns = patternManager.transform([].concat(source));\n  const settings = new settings_1.default(options);\n  const tasks = taskManager.generate(patterns, settings);\n  const provider = new _Provider(settings);\n  return tasks.map(provider.read, provider);\n}\nfunction assertPatternsInput(input) {\n  const source = [].concat(input);\n  const isValidSource = source.every(item => utils.string.isString(item) && !utils.string.isEmpty(item));\n  if (!isValidSource) {\n    throw new TypeError('Patterns must be a string (non empty) or an array of strings');\n  }\n}\nmodule.exports = FastGlob;","map":{"version":3,"names":["taskManager","require","patternManager","async_1","stream_1","sync_1","settings_1","utils","FastGlob","source","options","assertPatternsInput","works","getWorks","default","result","Promise","all","array","flatten","sync","stream","merge","generateTasks","patterns","transform","concat","settings","generate","isDynamicPattern","pattern","escapePath","path","escape","_Provider","tasks","provider","map","read","input","isValidSource","every","item","string","isString","isEmpty","TypeError","module","exports"],"sources":["/Users/manan/Desktop/hach-unicorn/StockSure/frontend1/node_modules/fast-glob/out/index.js"],"sourcesContent":["\"use strict\";\r\nconst taskManager = require(\"./managers/tasks\");\r\nconst patternManager = require(\"./managers/patterns\");\r\nconst async_1 = require(\"./providers/async\");\r\nconst stream_1 = require(\"./providers/stream\");\r\nconst sync_1 = require(\"./providers/sync\");\r\nconst settings_1 = require(\"./settings\");\r\nconst utils = require(\"./utils\");\r\nasync function FastGlob(source, options) {\r\n    assertPatternsInput(source);\r\n    const works = getWorks(source, async_1.default, options);\r\n    const result = await Promise.all(works);\r\n    return utils.array.flatten(result);\r\n}\r\n// https://github.com/typescript-eslint/typescript-eslint/issues/60\r\n// eslint-disable-next-line no-redeclare\r\n(function (FastGlob) {\r\n    function sync(source, options) {\r\n        assertPatternsInput(source);\r\n        const works = getWorks(source, sync_1.default, options);\r\n        return utils.array.flatten(works);\r\n    }\r\n    FastGlob.sync = sync;\r\n    function stream(source, options) {\r\n        assertPatternsInput(source);\r\n        const works = getWorks(source, stream_1.default, options);\r\n        /**\r\n         * The stream returned by the provider cannot work with an asynchronous iterator.\r\n         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\r\n         * This affects performance (+25%). I don't see best solution right now.\r\n         */\r\n        return utils.stream.merge(works);\r\n    }\r\n    FastGlob.stream = stream;\r\n    function generateTasks(source, options) {\r\n        assertPatternsInput(source);\r\n        const patterns = patternManager.transform([].concat(source));\r\n        const settings = new settings_1.default(options);\r\n        return taskManager.generate(patterns, settings);\r\n    }\r\n    FastGlob.generateTasks = generateTasks;\r\n    function isDynamicPattern(source, options) {\r\n        assertPatternsInput(source);\r\n        const settings = new settings_1.default(options);\r\n        return utils.pattern.isDynamicPattern(source, settings);\r\n    }\r\n    FastGlob.isDynamicPattern = isDynamicPattern;\r\n    function escapePath(source) {\r\n        assertPatternsInput(source);\r\n        return utils.path.escape(source);\r\n    }\r\n    FastGlob.escapePath = escapePath;\r\n})(FastGlob || (FastGlob = {}));\r\nfunction getWorks(source, _Provider, options) {\r\n    const patterns = patternManager.transform([].concat(source));\r\n    const settings = new settings_1.default(options);\r\n    const tasks = taskManager.generate(patterns, settings);\r\n    const provider = new _Provider(settings);\r\n    return tasks.map(provider.read, provider);\r\n}\r\nfunction assertPatternsInput(input) {\r\n    const source = [].concat(input);\r\n    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));\r\n    if (!isValidSource) {\r\n        throw new TypeError('Patterns must be a string (non empty) or an array of strings');\r\n    }\r\n}\r\nmodule.exports = FastGlob;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}