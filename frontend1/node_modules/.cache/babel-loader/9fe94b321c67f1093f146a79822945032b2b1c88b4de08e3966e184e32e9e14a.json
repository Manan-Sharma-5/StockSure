{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;\nconst utils = require(\"../utils\");\nfunction generate(patterns, settings) {\n  const positivePatterns = getPositivePatterns(patterns);\n  const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);\n  const staticPatterns = positivePatterns.filter(pattern => utils.pattern.isStaticPattern(pattern, settings));\n  const dynamicPatterns = positivePatterns.filter(pattern => utils.pattern.isDynamicPattern(pattern, settings));\n  const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, /* dynamic */false);\n  const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, /* dynamic */true);\n  return staticTasks.concat(dynamicTasks);\n}\nexports.generate = generate;\n/**\r\n * Returns tasks grouped by basic pattern directories.\r\n *\r\n * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.\r\n * This is necessary because directory traversal starts at the base directory and goes deeper.\r\n */\nfunction convertPatternsToTasks(positive, negative, dynamic) {\n  const tasks = [];\n  const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);\n  const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);\n  const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);\n  const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);\n  tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));\n  /*\r\n   * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory\r\n   * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.\r\n   */\n  if ('.' in insideCurrentDirectoryGroup) {\n    tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));\n  } else {\n    tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));\n  }\n  return tasks;\n}\nexports.convertPatternsToTasks = convertPatternsToTasks;\nfunction getPositivePatterns(patterns) {\n  return utils.pattern.getPositivePatterns(patterns);\n}\nexports.getPositivePatterns = getPositivePatterns;\nfunction getNegativePatternsAsPositive(patterns, ignore) {\n  const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);\n  const positive = negative.map(utils.pattern.convertToPositivePattern);\n  return positive;\n}\nexports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;\nfunction groupPatternsByBaseDirectory(patterns) {\n  const group = {};\n  return patterns.reduce((collection, pattern) => {\n    const base = utils.pattern.getBaseDirectory(pattern);\n    if (base in collection) {\n      collection[base].push(pattern);\n    } else {\n      collection[base] = [pattern];\n    }\n    return collection;\n  }, group);\n}\nexports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\n  return Object.keys(positive).map(base => {\n    return convertPatternGroupToTask(base, positive[base], negative, dynamic);\n  });\n}\nexports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\n  return {\n    dynamic,\n    positive,\n    negative,\n    base,\n    patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))\n  };\n}\nexports.convertPatternGroupToTask = convertPatternGroupToTask;","map":{"version":3,"names":["Object","defineProperty","exports","value","convertPatternGroupToTask","convertPatternGroupsToTasks","groupPatternsByBaseDirectory","getNegativePatternsAsPositive","getPositivePatterns","convertPatternsToTasks","generate","utils","require","patterns","settings","positivePatterns","negativePatterns","ignore","staticPatterns","filter","pattern","isStaticPattern","dynamicPatterns","isDynamicPattern","staticTasks","dynamicTasks","concat","positive","negative","dynamic","tasks","patternsOutsideCurrentDirectory","getPatternsOutsideCurrentDirectory","patternsInsideCurrentDirectory","getPatternsInsideCurrentDirectory","outsideCurrentDirectoryGroup","insideCurrentDirectoryGroup","push","getNegativePatterns","map","convertToPositivePattern","group","reduce","collection","base","getBaseDirectory","keys","convertToNegativePattern"],"sources":["/Users/manan/Desktop/hach-unicorn/StockSure/frontend1/node_modules/fast-glob/out/managers/tasks.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;\r\nconst utils = require(\"../utils\");\r\nfunction generate(patterns, settings) {\r\n    const positivePatterns = getPositivePatterns(patterns);\r\n    const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);\r\n    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));\r\n    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));\r\n    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, /* dynamic */ false);\r\n    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, /* dynamic */ true);\r\n    return staticTasks.concat(dynamicTasks);\r\n}\r\nexports.generate = generate;\r\n/**\r\n * Returns tasks grouped by basic pattern directories.\r\n *\r\n * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.\r\n * This is necessary because directory traversal starts at the base directory and goes deeper.\r\n */\r\nfunction convertPatternsToTasks(positive, negative, dynamic) {\r\n    const tasks = [];\r\n    const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);\r\n    const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);\r\n    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);\r\n    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);\r\n    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));\r\n    /*\r\n     * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory\r\n     * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.\r\n     */\r\n    if ('.' in insideCurrentDirectoryGroup) {\r\n        tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));\r\n    }\r\n    else {\r\n        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));\r\n    }\r\n    return tasks;\r\n}\r\nexports.convertPatternsToTasks = convertPatternsToTasks;\r\nfunction getPositivePatterns(patterns) {\r\n    return utils.pattern.getPositivePatterns(patterns);\r\n}\r\nexports.getPositivePatterns = getPositivePatterns;\r\nfunction getNegativePatternsAsPositive(patterns, ignore) {\r\n    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);\r\n    const positive = negative.map(utils.pattern.convertToPositivePattern);\r\n    return positive;\r\n}\r\nexports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;\r\nfunction groupPatternsByBaseDirectory(patterns) {\r\n    const group = {};\r\n    return patterns.reduce((collection, pattern) => {\r\n        const base = utils.pattern.getBaseDirectory(pattern);\r\n        if (base in collection) {\r\n            collection[base].push(pattern);\r\n        }\r\n        else {\r\n            collection[base] = [pattern];\r\n        }\r\n        return collection;\r\n    }, group);\r\n}\r\nexports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;\r\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\r\n    return Object.keys(positive).map((base) => {\r\n        return convertPatternGroupToTask(base, positive[base], negative, dynamic);\r\n    });\r\n}\r\nexports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;\r\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\r\n    return {\r\n        dynamic,\r\n        positive,\r\n        negative,\r\n        base,\r\n        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))\r\n    };\r\n}\r\nexports.convertPatternGroupToTask = convertPatternGroupToTask;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}